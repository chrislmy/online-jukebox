{"version":3,"sources":["logo.svg","components/Header/header.js","reducers/initialState.js","reducers/actionTypes.js","reducers/rootReducer.js","store/index.js","actions/socketActions/socket-messages.js","config.js","actions/actionCreators/user-actions.js","actions/actionCreators/lobby-actions.js","actions/socketActions/socket-actions.js","actions/actionCreators/video-queue-actions.js","components/VideoSuggestions/videoSuggestions.js","actions/youtubeApiActions/video-search-actions.js","components/SearchBar/searchBar.js","components/YoutubePlayer/subComponents/videoBanner.js","components/YoutubePlayer/subComponents/noVideoBackdrop.js","components/YoutubePlayer/youtubePlayer.js","molecules/VideoProgressBar/videoProgressBar.js","utils/convertTimeString.js","components/Playlist/playlist.js","components/Navbar/navbar.js","components/LoadingSpinner/loadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NothingPlayingHeader","react_default","a","createElement","Header","connect","state","nowPlayingTitle","video","videoTitle","username","user","_ref","className","src","logo","alt","header_NothingPlayingHeader","initialState","initialVideo","suggestedUser","videoId","videoDuration","initialPlaylist","currentPlaylist","initialUser","initialLobby","users","volume","loadingData","type","isLoading","actionTypes","rootReducer","combineReducers","arguments","length","undefined","action","types","Object","objectSpread","data","playlist","lobby","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","socketMessages","NEW_USER","USER_JOINED","FETCH_PLAYLIST","UPDATE_PLAYLIST","FETCH_LOBBY_USERS","UPDATE_LOBBY_USERS","PLAY_NEXT_VIDEO","ADD_TO_PLAYLIST","config","keys","API_KEY","API_BASE_URL","SERVER_BASE_ENDPOINT","environment","debug","user_actions","dataLoading","payload","dataLoadingComplete","lobby_actions","dispatch","updateVolumeAction","status","socket","socketIOClient","socket_actions","sessionUsername","localStorage","getItem","userForServer","emit","lobbyActions","on","userActions","setItem","setupUserConnection","videos","videoQueueActions","getHeadVideoPlaylist","updatePlaylist","updateCurrentVideo","defaultSkip","video_queue_actions","addVideoToQueue","socketActions","updateQueue","getState","VideoPanel","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","_this2","Fragment","key","thumbnail","title","channelTitle","duration","lib","bsStyle","onClick","React","Component","VideoSuggestions","rows","map","videoSuggestions_VideoPanel","video_search_actions","getVideos","query","Promise","resolve","reject","axios","get","then","response","catch","error","HeadPhoneIcon","VideoSearchPrompt","searchBar_HeadPhoneIcon","SearchBar","videoSearchActions","setState","results","console","log","handleInputChange","event","target","value","submitForm","preventDefault","onSubmit","controlId","Addon","placeholder","onChange","VideoSuggestions_videoSuggestions","searchBar_VideoSearchPrompt","volumes","volumeControl","player","setVolume","unMute","mute","VolumeButton","bsSize","VideoBanner","_ref2","volumeButtons","index","videoBanner_VolumeButton","NoVideoBackDrop","YoutubePlayerView","_onReady","_onChangeVideo","_onStateChange","playVideo","_this$props","currentVideoId","playerClassName","opts","height","width","playerVars","autoplay","controls","showinfo","subComponents_noVideoBackdrop","YouTube","onReady","onStateChange","subComponents_videoBanner","YoutubePlayer","VideoProgressBar","currentProgress","updateProgress","Math","ceil","getCurrentTime","interval","setInterval","previousProps","clearInterval","ProgressBar","now","VideoProgressBarWrapper","videoProgressBar_VideoProgressBar","convertTimeString","timeString","_segmentTime","timeUnits","segments","split","reverse","time","parseInt","timeObject","forEach","segmentTime","seconds","minutes","hours","totalTimeInSeconds","EmptyPlaylistView","Playlist","listItems","VideoProgressBar_videoProgressBar","playlist_EmptyPlaylistView","NoUsersItem","UserIcon","NavigationBar","NavBarDropdownItems","navbar_UserIcon","inverse","collapseOnSelect","Brand","Toggle","Collapse","pullRight","id","navbar_NoUsersItem","labelMap","CONNECTING_TO_LOBBY","SEARCHING_YOUTUBE_VIDEO","LoadingSpinner","_state$lobby$loadingD","spinnerClassName","App","LoadingSpinner_loadingSpinner","Navbar_navbar","Header_header","components_Playlist_playlist","YoutubePlayer_youtubePlayer","SearchBar_searchBar","Boolean","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c2a36ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6e0933ab.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport logo from '../../logo.svg';\r\nimport './header.css';\r\n\r\nconst NothingPlayingHeader = () => (\r\n    <span>\r\n        Nothing Playing, Party's Dead\r\n    </span>\r\n);\r\n\r\nconst HeaderView = ({ nowPlayingTitle, username }) => (\r\n    <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1 className=\"song-heading\">\r\n            { (nowPlayingTitle !== '') \r\n                ? (nowPlayingTitle)\r\n                : <NothingPlayingHeader />\r\n            }\r\n        </h1>\r\n        <h3 className=\"welcome-heading\">\r\n            Welcome, <span className=\"username-field\"> {username} </span>\r\n        </h3>\r\n    </header>\r\n);\r\n\r\nHeaderView.propTypes = {\r\n    nowPlayingTitle: PropTypes.string,\r\n    suggestedUser: PropTypes.string\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    nowPlayingTitle: state.video.videoTitle,\r\n    username: state.user.username\r\n});\r\n\r\nconst Header = connect(mapStateToProps)(HeaderView);\r\n\r\nexport default Header","const initialVideo = {\r\n    suggestedUser: '',\r\n    videoId: '',\r\n    videoTitle: '',\r\n    videoDuration: ''\r\n}\r\n\r\nconst initialPlaylist = {\r\n    currentPlaylist: []\r\n}\r\n\r\nconst initialUser = {\r\n    username: ''\r\n}\r\n\r\nconst initialLobby = {\r\n    users: [],\r\n    volume: 0,\r\n    loadingData: {\r\n        type: '',\r\n        isLoading: false\r\n    }\r\n}\r\n\r\nexport default {\r\n    initialVideo,\r\n    initialPlaylist,\r\n    initialUser,\r\n    initialLobby\r\n}","const UPDATE_CURRENT_VIDEO = 'UPDATE_CURRENT_VIDEO';\r\nconst UPDATE_PLAYLIST = 'UPDATE_PLAYLIST';\r\nconst UPDATE_USERNAME = 'UPDATE_USERNAME';\r\nconst UPDATE_USERS = 'UPDATE_USERS';\r\nconst UPDATE_VOLUME = 'UPDATE_VOLUME';\r\nconst LOADING_DATA = 'LOADING_DATA';\r\nconst DATA_LOADED_COMPLETE = 'DATA_LOADED_COMPLETE';\r\n\r\nexport default {\r\n    UPDATE_CURRENT_VIDEO,\r\n    UPDATE_PLAYLIST,\r\n    UPDATE_USERNAME,\r\n    UPDATE_USERS,\r\n    UPDATE_VOLUME,\r\n    LOADING_DATA,\r\n    DATA_LOADED_COMPLETE\r\n}\r\n","import initialState from './initialState';\r\nimport { combineReducers } from 'redux';\r\nimport types from './actionTypes';\r\n\r\nconst video = (state = initialState.initialVideo, action) => {\r\n    switch (action.type) {\r\n        case types.UPDATE_CURRENT_VIDEO:\r\n            return { ...state, ...action.data };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst playlist = (state = initialState.initialPlaylist, action) => {\r\n    switch (action.type) {\r\n        case types.UPDATE_PLAYLIST:\r\n            return { ...state, currentPlaylist: action.data };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst user = (state = initialState.initialUser, action) => {\r\n    switch (action.type) {\r\n        case types.UPDATE_USERNAME:\r\n            return { ...state, username: action.data };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst lobby = (state = initialState.initialLobby, action) => {\r\n    switch (action.type) {\r\n        case types.UPDATE_USERS:\r\n            return { ...state, users: action.data };\r\n        case types.UPDATE_VOLUME:\r\n            return { ...state, volume: action.data };\r\n        case types.LOADING_DATA:\r\n            return { ...state, loadingData: action.data };\r\n        case types.DATA_LOADED_COMPLETE:\r\n            return { ...state, loadingData: action.data };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({video, playlist, user, lobby});\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;","const socketMessages = {\r\n    NEW_USER: 'NEW_USER',\r\n    USER_JOINED: 'USER_JOINED',\r\n    FETCH_PLAYLIST: 'FETCH_PLAYLIST',\r\n    UPDATE_PLAYLIST: 'UPDATE_PLAYLIST',\r\n    FETCH_LOBBY_USERS: 'FETCH_LOBBY_USERS',\r\n    UPDATE_LOBBY_USERS: 'UPDATE_LOBBY_USERS',\r\n    PLAY_NEXT_VIDEO: 'PLAY_NEXT_VIDEO',\r\n    ADD_TO_PLAYLIST: 'ADD_TO_PLAYLIST'\r\n }\r\n\r\n export default socketMessages;","// Config used throughout the application\r\nconst config = {\r\n    keys: {\r\n        API_KEY: 'AIzaSyDXQUtd40PzAqYAuet9-Ol0LzKrI6ZTDDM',\r\n        API_BASE_URL: 'https://www.googleapis.com/youtube/v3/',\r\n        SERVER_BASE_ENDPOINT: 'https://tranquil-thicket-13222.herokuapp.com'\r\n        // SERVER_BASE_ENDPOINT: 'http://localhost:5000'\r\n    },\r\n    environment: {\r\n        debug: false\r\n    }\r\n}\r\n\r\nexport default config;","import types from '../../reducers/actionTypes';\r\n\r\nconst updateUsername = (username) => ({\r\n    type: types.UPDATE_USERNAME,\r\n    data: username\r\n});\r\n\r\nconst updateLobbyUsers = (users) => ({\r\n    type: types.UPDATE_USERS,\r\n    data: users\r\n});\r\n\r\nexport default {\r\n    updateUsername,\r\n    updateLobbyUsers\r\n}","import types from '../../reducers/actionTypes';\r\nimport store from '../../store/index';\r\n\r\nconst updateVolumeAction = (volume) => ({\r\n    type: types.UPDATE_VOLUME,\r\n    data: volume\r\n});\r\n\r\nconst dataLoading = (payload) => ({\r\n    type: types.LOADING_DATA,\r\n    data: payload\r\n});\r\n\r\nconst dataLoadingComplete = (payload) => ({\r\n    type: types.DATA_LOADED_COMPLETE,\r\n    data: payload\r\n});\r\n\r\nconst updateLoadingStatus = (status, payload) => {\r\n    if(status === 'calling') {\r\n        store.dispatch(dataLoading(payload));\r\n    }else if (status === 'complete') {\r\n        store.dispatch(dataLoadingComplete(payload));\r\n    }\r\n}\r\n\r\nconst updateVolume = (volume) => {\r\n    store.dispatch(updateVolumeAction(volume));\r\n}\r\n\r\nexport default {\r\n    updateVolume,\r\n    updateLoadingStatus,\r\n    dataLoading,\r\n    dataLoadingComplete\r\n};","import store from '../../store/index';\r\nimport socketIOClient from 'socket.io-client';\r\nimport socketMessages from './socket-messages';\r\nimport config from '../../config';\r\nimport videoQueueActions from '../actionCreators/video-queue-actions';\r\nimport userActions from '../actionCreators/user-actions';\r\nimport lobbyActions from '../actionCreators/lobby-actions';\r\n\r\nconst socket = socketIOClient(config.keys.SERVER_BASE_ENDPOINT);\r\n\r\n// Initialises socket user connection with server\r\nconst setupUserConnection = () => {\r\n    // Username is stored per cookie\r\n    const sessionUsername = localStorage.getItem(\"username\");\r\n    const userForServer = sessionUsername ? {username: sessionUsername} : {username: ''}\r\n    socket.emit(socketMessages.NEW_USER, userForServer);\r\n    lobbyActions.updateLoadingStatus('calling', {type: 'CONNECTING_TO_LOBBY', isLoading: true});\r\n    socket.on(socketMessages.USER_JOINED, (user) => {\r\n        if(!sessionUsername) {\r\n            store.dispatch(userActions.updateUsername(user.username));\r\n            localStorage.setItem('username', user.username);\r\n        } else {\r\n            store.dispatch(userActions.updateUsername(sessionUsername));\r\n        }\r\n    })\r\n}\r\n\r\n// Initialises socket lobby connection with server\r\nconst setupLobbyConnection = () => {\r\n    socket.emit(socketMessages.FETCH_LOBBY_USERS);\r\n    socket.on(socketMessages.UPDATE_LOBBY_USERS, (users) => {\r\n        store.dispatch(userActions.updateLobbyUsers(users));\r\n    })\r\n}\r\n\r\n// Initialises socket playlist connection with server\r\nconst setupPlaylistConnection = () => {\r\n    socket.emit(socketMessages.FETCH_PLAYLIST);\r\n    socket.on(socketMessages.UPDATE_PLAYLIST, (data) => {\r\n        const playlist = data.videos;\r\n        const video = videoQueueActions.getHeadVideoPlaylist(playlist);\r\n        store.dispatch(videoQueueActions.updatePlaylist(playlist));\r\n        store.dispatch(videoQueueActions.updateCurrentVideo(video));\r\n        lobbyActions.updateLoadingStatus('complete', {type: 'CONNECTING_TO_LOBBY', isLoading: false});\r\n    });\r\n}\r\n\r\nconst playNextVideo = (videoId, defaultSkip) => {\r\n    socket.emit(socketMessages.PLAY_NEXT_VIDEO, { videoId, defaultSkip });\r\n}\r\n\r\nconst addToPlaylist = (video) => {\r\n    socket.emit(socketMessages.ADD_TO_PLAYLIST, video);\r\n}\r\n\r\n// Initial setup of socket connections when jukebox is launched\r\nconst initialSetup = () => {\r\n    setupUserConnection();\r\n    setupPlaylistConnection();\r\n    setupLobbyConnection();\r\n}\r\n\r\nexport default {\r\n    initialSetup,\r\n    addToPlaylist,\r\n    playNextVideo\r\n}","import socketActions from '../socketActions/socket-actions';\r\nimport types from '../../reducers/actionTypes';\r\nimport store from '../../store/index';\r\nimport lobbyActions from './lobby-actions';\r\n\r\nconst addVideoToQueue = (videoId, videoTitle, videoDuration) => {\r\n    const video = {\r\n        videoId,\r\n        videoTitle,\r\n        videoDuration\r\n    }\r\n    lobbyActions.updateLoadingStatus('calling', {type: 'ADD_TO_PLAYLIST', isLoading: true});\r\n    socketActions.addToPlaylist(video);\r\n}\r\n\r\nconst getHeadVideoPlaylist = (playlist) => {\r\n    // Catches case when playlist array is empty\r\n    const nullVideo = {\r\n        videoTitle: '',\r\n        videoId: '',\r\n        suggestedUser: '',\r\n        videoDuration: ''\r\n    };\r\n    const head = playlist.length > 0 ? playlist[0] : nullVideo;\r\n    return head;\r\n};\r\n\r\n// If defaultSkip is set to false then only the host will play the next video\r\nconst updateQueue = (defaultSkip = true) => {\r\n    const state = store.getState();\r\n    const videoId = state.video.videoId;\r\n    socketActions.playNextVideo(videoId, defaultSkip);\r\n}\r\n\r\n// Redux store actions\r\nconst updateCurrentVideo = (video) => ({\r\n    type: types.UPDATE_CURRENT_VIDEO,\r\n    data: video\r\n})\r\n\r\nconst updatePlaylist = (playlist) => ({\r\n    type: types.UPDATE_PLAYLIST,\r\n    data: playlist\r\n});\r\n\r\nexport default {\r\n    addVideoToQueue,\r\n    updateCurrentVideo,\r\n    updatePlaylist,\r\n    getHeadVideoPlaylist,\r\n    updateQueue\r\n}\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap/lib';\r\nimport videoQueueActions from '../../actions/actionCreators/video-queue-actions';\r\nimport './videoSuggestions.css';\r\n\r\nclass VideoPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(videoId, videoTitle, videoDuration) {\r\n        videoQueueActions.addVideoToQueue(videoId, videoTitle, videoDuration);\r\n    }\r\n\r\n    render() {\r\n        const video = this.props.video;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <li className=\"suggestion-list-item\" key={video.videoId}>\r\n                    <div><img alt=\"video-thumbnail\" className=\"suggestion-thumbnail\" src={video.thumbnail} /></div>\r\n                    <div className=\"suggestion-description\">\r\n                        <h3 className=\"suggestion-title\">\r\n                            <i className=\"fas fa-music music-icon\"></i>{video.title}\r\n                        </h3>\r\n                        <div className=\"video-channel\">\r\n                            <i className=\"fab fa-youtube-square youtube-icon\"></i> {video.channelTitle}\r\n                        </div>\r\n                        <div className=\"video-duration\">\r\n                            <i className=\"fas fa-stopwatch stopwatch-icon\"></i> {video.duration}\r\n                        </div>\r\n                    </div>\r\n                    <Button\r\n                        className=\"add-video-button\"\r\n                        bsStyle=\"primary\"\r\n                        onClick={ () => this.handleClick(video.videoId, video.title, video.duration) }\r\n                        >\r\n                            <i className=\"fas fa-plus plus-icon\"></i>\r\n                    </Button>\r\n                </li>\r\n                <hr className=\"video-suggestion-seperator\"/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst VideoSuggestions = ({ videos }) => {\r\n    const rows = videos.map(video => (\r\n        <VideoPanel key={video.videoId} video={video} />\r\n    ))\r\n\r\n    return <ul className=\"video-suggestion-list\">{rows}</ul>\r\n}\r\n\r\nexport default VideoSuggestions","import axios from 'axios'\r\nimport config from '../../config'\r\nimport lobbyActions from '../actionCreators/lobby-actions';\r\n\r\nconst getVideos = (query) => new Promise((resolve, reject) => {\r\n    lobbyActions.updateLoadingStatus('calling', {type: 'SEARCHING_YOUTUBE_VIDEO', isLoading: true});\r\n    axios.get(config.keys.SERVER_BASE_ENDPOINT + '/videos?query=' + query)\r\n        .then((response) => {\r\n            lobbyActions.updateLoadingStatus('complete', {type: 'SEARCHING_YOUTUBE_VIDEO', isLoading: false});\r\n            resolve(response.data);\r\n        })\r\n        .catch((error) => {\r\n            lobbyActions.dataLoadingComplete('complete', {type: 'CALL_FAILED_VIDEO_SEARCH', isLoading: false});\r\n            reject(error.response);\r\n        });\r\n});\r\n\r\n\r\nexport default {\r\n    getVideos\r\n}","import React from 'react';\r\nimport { InputGroup, FormGroup, FormControl } from 'react-bootstrap/lib';\r\nimport VideoSuggestions from '../VideoSuggestions/videoSuggestions';\r\nimport videoSearchActions from '../../actions/youtubeApiActions/video-search-actions';\r\nimport './searchBar.css';\r\n\r\nconst HeadPhoneIcon = () => (\r\n    <i className=\"fas fa-headphones-alt head-phone-icon\"></i>\r\n);\r\n\r\nconst VideoSearchPrompt = () => (\r\n    <div className=\"search-video-prompt-container\">\r\n        <HeadPhoneIcon />\r\n        <h4 className=\"search-video-prompt-prefix\"> Search for your favorite songs </h4>\r\n        <h5 className=\"search-video-prompt-suffix\"> Let's get this party started! </h5>\r\n    </div>\r\n)\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            query: '',\r\n            results: []\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.submitForm = this.submitForm.bind(this);\r\n    }\r\n\r\n    submitForm (event) {\r\n        // Prevent page from being reloaded\r\n        event.preventDefault();\r\n        this.getVideos();\r\n    }\r\n\r\n    getVideos = () => {\r\n        videoSearchActions.getVideos(this.state.query)\r\n            .then((videos) => {\r\n                this.setState({\r\n                    results: videos\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n        \r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        this.setState({\r\n            query: event.target.value    \r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"video-search-section\">\r\n                <form onSubmit={this.submitForm}>\r\n                    <FormGroup className=\"search-bar-wrapper\" controlId=\"formBasicText\">\r\n                        <InputGroup>\r\n                            <InputGroup.Addon>\r\n                                <i className=\"fab fa-youtube-square\"></i>\r\n                            </InputGroup.Addon>\r\n                            <FormControl\r\n                                className=\"search-bar\"\r\n                                type=\"text\"\r\n                                value={this.state.query}\r\n                                placeholder=\"Enter a song name from Youtube\"\r\n                                onChange={this.handleInputChange}\r\n                            />\r\n                        </InputGroup>\r\n                    </FormGroup>\r\n                    \r\n                </form>\r\n                <div className=\"video-suggestions\">\r\n                    { this.state.results.length > 0\r\n                        ? <VideoSuggestions videos={this.state.results} />\r\n                        : <VideoSearchPrompt />\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'react-bootstrap/lib';\r\nimport { connect } from 'react-redux';\r\nimport videoQueueActions from '../../../actions/actionCreators/video-queue-actions';\r\nimport lobbyActions from '../../../actions/actionCreators/lobby-actions';\r\nimport './videoBanner.css';\r\n\r\nconst volumes = [25, 50, 75, 100];\r\n\r\nconst volumeControl = (volume, player) => {\r\n    lobbyActions.updateVolume(volume);\r\n    if(volume === 0){\r\n        player.mute();\r\n        return\r\n    }\r\n    player.setVolume(volume)\r\n    player.unMute();\r\n}\r\n\r\nconst VolumeButton = ({volume, player}) => (\r\n    <Button \r\n        className=\"volume-buttons\"\r\n        bsStyle=\"primary\"\r\n        bsSize=\"small\"\r\n        onClick={ () => { volumeControl(volume, player) } }\r\n    >\r\n        {volume}\r\n    </Button>\r\n);\r\n\r\nconst VideoBannerView = ({suggestedUser, player, volume}) => {\r\n    const volumeButtons = volumes.map((volume,index) => (\r\n        <VolumeButton player={player} volume={volume} key={index} />\r\n    ))\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h4 className=\"video-banner-title\">\r\n                Added by : <span className=\"suggested-user\" >{suggestedUser}</span>\r\n            </h4>\r\n            <div className=\"control-buttons\">\r\n                <Button \r\n                    className=\"skip-video-button\"\r\n                    bsStyle=\"primary\"\r\n                    bsSize=\"small\"\r\n                    onClick={ () => videoQueueActions.updateQueue(true) }\r\n                >\r\n                    Skip <i className=\"skip-icon fas fa-forward\"></i>\r\n                </Button>\r\n\r\n                { volume === 0 ?\r\n                    <Button \r\n                        className=\"mute-button\"\r\n                        bsStyle=\"primary\"\r\n                        bsSize=\"small\"\r\n                        onClick={ () => { volumeControl(50, player) } }\r\n                    >\r\n                        <i className=\"fas fa-volume-mute\"></i>\r\n                    </Button> :\r\n                    <Button \r\n                        className=\"mute-button\"\r\n                        bsStyle=\"primary\"\r\n                        bsSize=\"small\"\r\n                        onClick={ () => { volumeControl(0, player) } }\r\n                    >\r\n                        <i className=\"fas fa-volume-up\"></i>\r\n                    </Button>\r\n                }\r\n\r\n                {volumeButtons}\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nVideoBannerView.propTypes = {\r\n    suggestedUser: PropTypes.string.isRequired,\r\n    player: PropTypes.object,\r\n    volume: PropTypes.number.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    volume: state.lobby.volume\r\n});\r\n\r\nconst VideoBanner = connect(mapStateToProps)(VideoBannerView);\r\n\r\nexport default VideoBanner;","import React from 'react';\r\nimport './noVideoBackdrop.css';\r\n\r\nconst NoVideoBackDrop = () => (\r\n    <div className=\"no-video-backdrop\">\r\n        <h4 className=\"no-video-backdrop-title\"> Jukebox Paused </h4>\r\n    </div>\r\n);\r\n\r\nexport default NoVideoBackDrop;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Youtube from 'react-youtube';\r\nimport { connect } from 'react-redux';\r\nimport config from '../../config';\r\nimport VideoBanner from './subComponents/videoBanner';\r\nimport NoVideoBackdrop from './subComponents/noVideoBackdrop';\r\nimport videoQueueActions from '../../actions/actionCreators/video-queue-actions';\r\nimport './youtubePlayer.css';\r\n\r\nclass YoutubePlayerView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            player: null\r\n        };\r\n\r\n        this._onReady = this._onReady.bind(this);\r\n        this._onChangeVideo = this._onStateChange.bind(this);\r\n    }\r\n\r\n    _onReady(event) {\r\n        // Mount player to component\r\n        this.setState({\r\n            player: event.target\r\n        });\r\n        window.player = event.target;\r\n        event.target.mute();\r\n        event.target.playVideo();\r\n    }\r\n\r\n    _onStateChange(event) {\r\n        // Finished playing\r\n        if(event.data === 0) {\r\n            videoQueueActions.updateQueue(false);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { currentVideoId, suggestedUser } = this.props\r\n\r\n        const playerClassName = config.environment.debug ? 'Youtube-Player-Debug' : 'Youtube-Player';\r\n        const debugPlayerVars = { autoplay: 1 };\r\n        const defaultPlayerVars = {\r\n            autoplay: 1,\r\n            controls: 0,\r\n            showinfo: 0\r\n        };\r\n\r\n        const playerVars = config.environment.debug ? debugPlayerVars : defaultPlayerVars;\r\n\r\n        const opts = {\r\n            height: '250',\r\n            width: '420',\r\n            playerVars\r\n        }\r\n\r\n        return (\r\n            <div className=\"Youtube-Player-Wrapper\">\r\n                { currentVideoId === '' && <NoVideoBackdrop /> }\r\n                <Youtube\r\n                    className= {playerClassName}\r\n                    videoId={currentVideoId}\r\n                    opts={opts}\r\n                    onReady={this._onReady}\r\n                    onStateChange={this._onStateChange}\r\n                />\r\n                { suggestedUser !== '' \r\n                    ? <VideoBanner suggestedUser={suggestedUser} videoId={currentVideoId} player={this.state.player}/>\r\n                    : <h4 className=\"jukebox-paused-title\">There are currently no songs in the playlist</h4>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nYoutubePlayerView.propTypes = {\r\n    currentVideoId: PropTypes.string,\r\n    suggestedUser: PropTypes.string\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    currentVideoId: state.video.videoId,\r\n    suggestedUser: state.video.suggestedUser\r\n});\r\n\r\nconst YoutubePlayer = connect(mapStateToProps)(YoutubePlayerView);\r\n\r\nexport default YoutubePlayer","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ProgressBar } from 'react-bootstrap';\r\nimport './videoProgressBar.css';\r\n\r\n// A custom progress bar which indicates progress of the current playing video\r\nclass VideoProgressBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentProgress: 0\r\n        };\r\n        this.updateProgress = () => {\r\n            const { videoDuration } = this.props;\r\n            let currentProgress = 0;\r\n            \r\n            if(window.player) {\r\n                currentProgress = Math.ceil((window.player.getCurrentTime()/videoDuration)*100);\r\n            }\r\n           \r\n            this.setState({\r\n                currentProgress\r\n            }); \r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(this.updateProgress, 500);\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        const { videoDuration } = this.props;\r\n        if(videoDuration !== previousProps.videoDuration){\r\n            clearInterval(this.interval);\r\n            this.interval = setInterval(this.updateProgress, 500);\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ProgressBar now={this.state.currentProgress} />\r\n        )\r\n    }\r\n}\r\n\r\nconst VideoProgressBarWrapper = ({videoDuration}) => (\r\n    <React.Fragment>\r\n        { videoDuration !== 0 && <VideoProgressBar videoDuration={videoDuration} /> }\r\n    </React.Fragment>\r\n)\r\n\r\nVideoProgressBar.propTypes = {\r\n    videoDuration: PropTypes.number.isRequired\r\n};\r\n\r\nVideoProgressBarWrapper.propTypes = {\r\n    videoDuration: PropTypes.number.isRequired\r\n};\r\n\r\nexport default VideoProgressBarWrapper;","const segmentTime = (timeString) => {\r\n    const timeUnits = ['seconds', 'minutes', 'hours'];\r\n    const segments = timeString.split(':').reverse().map(time => parseInt(time));\r\n    const timeObject = {}\r\n\r\n    if(segments.length > 0) {\r\n        segments.forEach((duration, index) => {\r\n            timeObject[timeUnits[index]] = duration\r\n        });\r\n    }\r\n\r\n    return timeObject;\r\n}\r\n\r\n// Converts a time string like this '02:58' to seconds\r\nconst convertTimeString = (timeString) => {\r\n    const { seconds, minutes, hours} = segmentTime(timeString);\r\n    let totalTimeInSeconds = 0;\r\n    \r\n    totalTimeInSeconds += (seconds ? seconds : 0);\r\n    totalTimeInSeconds += (minutes ? minutes*60 : 0);\r\n    totalTimeInSeconds += (hours ? hours*60*60 : 0);\r\n\r\n    return totalTimeInSeconds;\r\n}\r\n\r\nexport default convertTimeString;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport VideoProgressBar from '../../molecules/VideoProgressBar/videoProgressBar';\r\nimport convertTimeString from '../../utils/convertTimeString';\r\nimport './playlist.css';\r\n\r\nconst EmptyPlaylistView = () => (\r\n    <div className=\"empty-video-background\">\r\n        <i className=\"pause-icon far fa-pause-circle\"></i>\r\n        <h4 className=\"no-video-text\">Currently no videos on the queue</h4>\r\n    </div>\r\n);\r\n\r\nconst PlaylistView = ({playlist, videoDuration}) => {\r\n    const listItems = playlist.map((video,index) => (\r\n        <React.Fragment key={index}>\r\n            <li className=\"playlist-item\" key={index}>\r\n                <i className=\"music-icon fas fa-music\"></i>{video.videoTitle}\r\n            </li>\r\n            { index === 0 && <VideoProgressBar videoDuration={videoDuration}/> }\r\n            <hr className=\"seperator\"/>\r\n        </React.Fragment>\r\n    ))\r\n\r\n    return (\r\n        <div className=\"playlist-section\">\r\n            <h4 className=\"playlist-header\"> Current Playlist</h4>\r\n            <hr className=\"seperator\"/>\r\n            <ul className=\"video-playlist\">\r\n                { playlist.length > 0 ? (listItems) : <EmptyPlaylistView/> }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    playlist: state.playlist.currentPlaylist,\r\n    videoDuration: convertTimeString(state.video.videoDuration)\r\n});\r\n\r\nconst Playlist = connect(mapStateToProps)(PlaylistView);\r\n\r\nexport default Playlist;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Navbar, Nav, NavDropdown, MenuItem } from 'react-bootstrap/lib';\r\nimport './navbar.css';\r\n\r\nconst NoUsersItem = () => (\r\n    <MenuItem>Currently No Users</MenuItem>\r\n);\r\n\r\nconst UserIcon = () => (\r\n    <i className=\"user-icon fas fa-user\"></i>\r\n);\r\n\r\nconst NavigationBarView = ({users, username}) => {\r\n    const NavBarDropdownItems = users.map((user,index) => (\r\n        <MenuItem key={index}>\r\n            <UserIcon/>\r\n            <span className=\"username-list-item\">\r\n                {user.username}\r\n                { username === user.username && (' (You)') }\r\n            </span>\r\n        </MenuItem>\r\n    ));\r\n    \r\n    return (\r\n        <Navbar inverse collapseOnSelect>\r\n            <Navbar.Header>\r\n                <Navbar.Brand>\r\n                    Online Jukebox\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle />\r\n            </Navbar.Header>\r\n            <Navbar.Collapse>\r\n                <Nav pullRight>\r\n                    <NavDropdown title=\"Users\" id=\"Users-Nav-Dropdown\">\r\n                        { users.length > 0 ? (NavBarDropdownItems) : <NoUsersItem/> }\r\n                    </NavDropdown>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        username: state.user.username,\r\n        users: state.lobby.users\r\n    }\r\n};\r\n\r\nconst NavigationBar = connect(mapStateToProps)(NavigationBarView);\r\n\r\nexport default NavigationBar\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './loadingSpinner.css';\r\n\r\nconst labelMap =  {\r\n    CONNECTING_TO_LOBBY: 'Plugging you in ...',\r\n    SEARCHING_YOUTUBE_VIDEO: 'Searching ...',\r\n    ADD_TO_PLAYLIST: 'Adding to Playlist ...'\r\n};\r\n\r\nconst LoadingSpinnerView = ({isLoading, type}) => {\r\n    const spinnerClassName = isLoading ? 'full-page-spinner-container' : 'full-page-spinner-inactive';\r\n\r\n    return (\r\n        <div className={spinnerClassName}>\r\n            <div className=\"full-page-spinner\"></div>\r\n            <div className=\"full-page-spinner-label\"> {labelMap[type]} </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    const { isLoading, type } = state.lobby.loadingData;\r\n    return {\r\n        isLoading,\r\n        type\r\n    }\r\n}\r\n\r\nLoadingSpinnerView.propTypes = {\r\n    isLoading: PropTypes.bool.isRequired,\r\n    type: PropTypes.string.isRequired\r\n};\r\n\r\nconst LoadingSpinner = connect(mapStateToProps)(LoadingSpinnerView);\r\n\r\nexport default LoadingSpinner;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/header';\nimport SearchBar from './components/SearchBar/searchBar';\nimport YoutubePlayer from './components/YoutubePlayer/youtubePlayer';\nimport socketActions from './actions/socketActions/socket-actions';\nimport Playlist from './components/Playlist/playlist';\nimport NavigationBar from './components/Navbar/navbar';\nimport LoadingSpinner from './components/LoadingSpinner/loadingSpinner'\nimport LobbyControls from './components/LobbyControls/lobbyControls';\n\nclass App extends Component {\n    componentDidMount() {\n        socketActions.initialSetup();\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <LoadingSpinner />\n                <NavigationBar />\n                <Header />\n                <div className=\"upper-section-container\">\n                    <div className=\"player-view-container\">\n                        <span className=\"current-playlist-section\"><Playlist /></span>\n                        <span className=\"youtube-player-container\"><YoutubePlayer /></span>\n                    </div>\n                    {/* <LobbyControls/> */}\n                </div>\n                <div className=\"lower-section-container\"><SearchBar /></div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}